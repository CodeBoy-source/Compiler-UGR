principal()
{
    ini_var
        entero ve,v, c, g, n;
        real vf, x, z, m, j;
        car vc;
        bool vl;
        entero pe, pe2;
        real pf, pf2;
        car pc, pc2;
        bool pl, pl2;
        listade entero lx, lz, a;
    fin_var

    real funcionB (car b1, bool b2)
    {
        ini_var
        // Declaramos una variable con el mismo nombre que en principal()
            real vf;
            car vc;
            bool vl;
            real xf, x2;
        fin_var

        real funcionC (bool c1, entero c2)
        {
            ini_var
                real x1;
                entero aux;
            fin_var

            x1 = 1.3;


            si (c2>10)
                 c2 = c2 - 1;
            sino
                x1=3.1;



            devolver x1;
        }
        // Probamos definir dos funciones en un mismo bloque.
        real funcionD (bool c1, entero c2)
        {
            ini_var
                real x1;
            fin_var

            x1 = 1.3;
            si (c2>10)
                c2 = c2 - 1;
            sino
                x1=3.1;
            devolver x1;
        }

        // Probamos utilizar llamadas a las funciones definidas
        // Recordatorio: xf es de tipo real, funcionC y D devuelven real;
        xf = funcionC(Verdadero, 10);
        xf = funcionD(Falso,-2);

        // Probamos multiples llamadas en una línea
        x2 = xf*(funcionC(Falso,1)-funcionC(Verdadero,23))/10.0;

        // Probemos asignarle un valor erróneo por ejemplo:
        xf = "Esto no debería funcionar";

        // Parámetros invertidos -> debería dar error
        x2 = funcionC(10,Verdadero);

        mientras(x2*funcionC(Falso,2)-xf<10.0)
            x2=x2*xf;

        // Devolvemos un tipo real para nuestra funcionB que es de tipo real
        devolver x2;
    }


    pe=pe2;
    // pe3 no existe -> debería dar error
    pe2=pe3;
    // vl y vc no son del mismo tipo -> debería dar error
    vl=vc;
    vf = 1.3;

    // Probemos operadores con listas:
    // Operaciones de desplazamientos correctas:
    lx = lx>>;
    lx = lx<<;
    // Operaciones de desplazamiento erróneas:
    // pe es de tipo entero
    //lx = pe<<;
    //lx = pe>>;
    // Operacion unaria de lista correcta:
    lx = $lx;
    lx = ?lx;
    lx = #lx;
    // Operacion incorrecta de unario de lista:
    lx = $pe;
    lx = ?pe;
    lx = #pe;
    // Operacion correcta con arroba:
    a = lx@1;
    // Operacion incorrecta con arroba:
    a = pe@1;
    //Operacion correcta con ++ y --:
    lz = lx++a@2;
    lx = lx--1;
    // Operacion incorrecta con ++ y --:
    lz = lx++pe@2;
    lz = pe++a@2;
    lx = lx--'h';
    lx = pe--1;
    // Operacion correcta con %:
    lx = lx%0;
    // Operacoin incorrecta con %
    lx = lx%'h';
    lx = pe%0;
    // Operacion correcta con **:
    lx = lx**lz;
    // Operacion incorrecta con **:
    lx = pe**lz;
    // Operaciones correctas con listas:
    lx = lx+1;
    a = 1 + lx;
    lx = lx - 1;
    lx = lx * 1;
    // Operaciones incorrectas con listas: 
    a  = x * lx;
    lx = lx / x;

    // Probamos devolver un booleano para principal() que es entero
    devolver pl;
}
