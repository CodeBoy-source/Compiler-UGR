principal()
{
    ini_var
        entero ve;
        entero ve2;
        real vf;
        car vc;
        bool vl;
        listade entero pe, pe2;
        listade real pf, pf2;
        listade car pc, pc2;
        listade bool  pl, pl2;
    fin_var

    entero funcionA(entero a1, real a2, car a3)
    {
        ini_var
            entero x1, x2,a3;
        fin_var

        car funcionB (car b1, bool b2)
        {
            ini_var
                real xf, x2;
            fin_var

                real funcionC (bool c1, entero c2)
                {
                    ini_var
                        real x1;
                    fin_var

                    x1 = 1.3+ve2;
                    ve = funcionA(2+4,2.5*4.3,'q');
                    si ((c2>10))
                        c2 = c2 - 1;
                    sino
                        x1=3.1;
                    devolver x1;
                }

            // xf = functionC(Verdadero, 10);
            x2 = xf*funcionC(Falso,1)-funcionC(Verdadero,23)/10.0;

            mientras(x2*funcionC(Falso,10)-xf<10.0)
                x2=x2*xf;

        }

        real funcionD (real d1)
        {
            ini_var
                car dato;
                entero valor;
            fin_var

                car funcionE(car e1, car e2)
                {
                    imprimir << "introduzca dos caracteres: ";
                    entrada >> e1 >> e2;
                    si(e1=='a')
                        devolver e1;
                    sino si (e1=='b')
                        devolver e2;
                    sino
                        devolver ' ';
                }

            imprimir << "introduzca un valor entero: ";
            entrada >> valor;

            si (d1>0.0)
            {
                ini_var
                    entero dato;
                fin_var

                dato = 2;
                dato = valor*20/dato;
            }
            sino {
                valor=valor*100;
                d1=d1/1000.0;
            }

            devolver d1;
        }

       pe = [1, 2, 3, 4];

       pe>>;
       pe<<;
       $pe;

       ve = #pe;
       ve = ?pe;
       ve = pe@1+ve;

       pe = pe++pe2@2;
       pe = pe--1;
       pe = pe%0;
       pe = pe**pe2;
       pe = pe+1;
       pe2 = 1 + pe+vf;
       pe = pe - 1;
       pe = pe * 1;
       pe2  = ve * pe;
       pe = pe / ve;
    }

    devolver 0;
}
